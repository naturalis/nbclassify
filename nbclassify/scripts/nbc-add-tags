#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
This program is made to automatically add tags to pictures
on a flickr account. The information to add to the tags
are harvested from a comma separated file.

The first time this program is run, the webbrowser will
ask to accept the connection that is made with the flickr account.
After this is accepted once, it won't be asked again.

This program can be run in Windows via commandprompt or in a
terminal in Linux by the command:
    python nbc-add-tags FLICKR_UID METAFILE
where FLICKR_UID and METAFILE are required arguments. Use the
-h option for more information about required- and optional arguments.

This program requires python 2.7.9 or a higher 2.7 version.
"""

import argparse
import flickrapi
import sys
import xml.etree.ElementTree

# Flickr API Key for NBClassify.
FLICKR_API_KEY = "6ad8fc70959e3c50eff8339287dd38bd"
FLICKR_API_SECRET = "d7e3a0b378034fa6"


def main():
    """
    An argument parser is created. A local user ID and a comma
    separated file with metadata are required arguments.
    The global key, global secret and local user ID are used to
    create a flickr object.
    The function 'retrieve_tag_info' is called to harvest meta data
    from a file.
    The function 'get_pictures' is called to get pictures from the
    flickr object and add tags to it.
    """
    parser = argparse.ArgumentParser(
        description="This program is made to automatically add tags to "
                    "pictures on a flickr account. The information to add "
                    "to the tags are harvested from a comma separated file."
    )
    parser.add_argument(
        "flickr_uid",
        metavar="FLICKR_UID",
        help="The Flickr user ID to harvest photos from (e.g. 123456789@A12)"
    )
    parser.add_argument(
        "metafile",
        metavar="METAFILE",
        help="Comma separated file with metadata to add as tags to the pictures."
    )
    parser.add_argument(
        "--cols_with_comma",
        metavar="x;y;z",
        help="The comma separated metafile will be split on every comma when read. "
             "If there are columns that contain information with a comma in "
             "every row that must not be split, enter the indexnumbers these "
             "columns have in the metafile, separated by a semicolon. "
             "The first column has index 0. "
             "Headers can't have a comma, nor can only a few rows of a column."
    )
    parser.add_argument(
        "--per_page",
        metavar="N",
        type=int,
        default=100,
        help="Number of pictures to process per page on Flickr.com. Defaults "
             "to 100 if omitted. The maximum allowed number is 500."
    )
    parser.add_argument(
        "--page",
        metavar="N",
        type=int,
        default=1,
        help="Pagenumber to start to add tags on Flickr.com. Defaults to 1 if "
             "omitted."
    )
    parser.add_argument(
        "--pages",
        metavar="N",
        type=int,
        default=1,
        help="Number of pages on Flickr.com to process. Defaults to 1 if "
             "omitted. To process all pages, use 0."
    )

    # Parse arguments.
    args = parser.parse_args()

    api = FlickrCommunicator(FLICKR_API_KEY, FLICKR_API_SECRET, args.flickr_uid)
    meta_dict = retrieve_tag_info(args)
    get_pictures(api, meta_dict, args)


def get_pictures(api, meta_dict, args):
    """
    Three parameters are passed into this function:
        api:        Flickr object.
        meta_dict:  Dictionary with text for tags.
        args:       Result of argument parser.
    In this function variables are set for pagenumber (pagenr), total
    number of pages to process (total_pages) and the number of the
    last page to process (last_page).
    While the pagenumber is less or equal to the number of the last
    page, photo's of that pagenumber will be harvested from the
    flickr page in batches of 100 (or the given number by the user)
    at a time.
    The function 'add_tags' is called, in which the tags will be
    added to the pictures of this batch.
    If the total_pages number is zero, all pages need to be processed,
    so the correct total number of pages is retrieved from the
    information in the photo-batch.
    Variable 'total_pages' is now set by this number and the number
    of the last page is recalculated.
    A message is displayed how many pictures were tagged in that
    pagenumber and how many pages there are left to process.
    The pagenumber will be increased by one in order to go to
    the next page.
    """
    pagenr = args.page
    total_pages = args.pages
    last_page = args.page + total_pages -1

    while pagenr <= last_page:
        photos = api.flickr.photos.search(api_key=FLICKR_API_KEY,
                                          user_id=args.flickr_uid,
                                          format='etree',
                                          per_page=str(args.per_page),
                                          page=pagenr)
        photonumber = add_tags(api, photos, meta_dict)
        if total_pages == 0:
            for information in photos.iter("photos"):
                total_pages = int(information.get('pages'))
            last_page = args.page + total_pages - 1
        print(str(photonumber) + " photo's in page " + str(pagenr) +
              "have been tagged. " + str(last_page - pagenr) +
              " more pages to go.")
        pagenr += 1
        

def add_tags(api, photos, meta_dict):
    """
    Three parameters are passed into this function:
        api:       Flickr object.
        photos:    Element object with pictures.
        meta_dict: Dictionary with text for tags.
    A variable is set to zero, to count the number of pictures
    to which tags are added.
    For every picture in the Element object, the title of that
    picture is checked to be in the keys of the dictionary.
    If that is the case, the photo-id and tags are put in
    variables and handed over to the flickr method 'addTags'.
    The tags will now be added to this picture and the
    photonumber will be increased by one.
    If the title is not in the keys of the dictionary,
    there are no tags available for that picture and an
    error message will be displayed with this information.
    The number of pictures that were tagged is returned.
    """
    photonumber = 0
    for photo in photos.iter("photo"):
        if photo.attrib['title'].startswith('ZMA.INS'):
            title = photo.attrib['title'][8:15]
            if title in meta_dict.keys():
                tags = meta_dict[title]
                photo_id = photo.attrib['id']
                api.flickr.photos.addTags(api_key=FLICKR_API_KEY,
                                          photo_id=photo_id,
                                          tags=tags)
                photonumber += 1
            else:
                sys.stderr.write(title + ' has no meta data.\n')
    return photonumber


def retrieve_tag_info(args):
    """
    One parameter is passed into this function:
        args: Result of an argument parser.
    In this function, an attempt will be made to open a
    metadata file in read modus. The file is read line by line and
    every line is split on a comma. The function 'undo_split' is
    called. In case there is a comma in the information of every
    row of a column, the split in these columns will be undone if
    the user gave the indexnumber of these columns in the argument
    parser.
    For every line, a string will be made with the information of
    that line, combined with the header of every column. This string
    is added to a dictionary as a value, the key is the first item
    of the line: a registration number.
    Error messages are raised when the file doesn't exist, there are
    not enough columns in the file or there is no information in
    the file.
    When all went well, a message will be displayed.
    The dictionary with the data will be returned.
    """
    meta_dict = {}
    try:
        metafile = open(args.metafile, 'r')
        header = metafile.readline().split(',')
        info = metafile.readline()
        while info != "":
            info = info.split(',')
            info = undo_split(info, args, len(header))
            tag_string = ""
            for item in range(len(header)):
                if not info[item].isspace() and info[item] != "":
                    new_information = make_tag_string(info[item], header[item])
                    tag_string += new_information
            meta_dict[info[0]] = tag_string
            info = metafile.readline()
        metafile.close()
    except IOError:
        raise IOError("The file '" + args.metafile +
                      "' for metadata was not found.")
    except IndexError:
        raise IndexError("'" + args.metafile + "' has not enough columns.")
    else:
        if meta_dict == {}:
            raise IndexError("There is no information in '" +
                             args.metafile + "'.")
        else:
            print("The meta data was read successfully.")
    return meta_dict


def undo_split(info, args, total_columns):
    """Two parameters are passed into this function:
        info:    List of one row of the metadatafile,
                 splitted on a comma.
        args:    Result of an argument parser.
    If the user gave indexnumbers of columns that contain a comma
    in the information of every row, the split in that information
    will be undone.
    The list with information per column is returned.
    """
    if args.cols_with_comma:
        no_split = args.cols_with_comma.split(";")
        no_split.sort()
        for columnr in no_split:
            try:
                columnr = int(columnr)
                info[columnr] = str(info[columnr] + "," + info.pop(columnr + 1))[1:-1]
            except ValueError:
                given_type = str(type(columnr))
                raise ValueError("The value of argument '--cols_with_comma' is "
                                 "wrong. It must be integers, in stead of "
                                 + given_type + ".")
            except IndexError:
                raise IndexError("Remember the column count starts at zero!\n"
                                 "There are only " + str(total_columns) +
                                 " columns in the metadatafile,\nso the final"
                                 " column is called by index " +
                                 str(total_columns - 1) +
                                 ".\nTherefore there is no column " +
                                 str(columnr) + " to undo the split.")
    return info


def make_tag_string(text, header):
    """
    Two parameters are passed into this function:
        text:   String with information.
        header: String with header.
    In this function every '/' will be replaced by a '-' in the text.
    If there is a space in the text, double quotes must surround
    the entire tag information, so they will be added.
    The string with all the tag information is formed, in the
    format <key>:<value>. The key is the header information, the
    value the text. If necessary there will be double quotes
    surrounding the string. A space is put at the end of the string
    (outside the double quotes) to indicate the end of the tag.
    The string with the tag information is returned.
    """
    if '/' in text:
        # To display the date like YYYY-MM-DD.
        text = text.replace('/', '-')
    if " " in text.rstrip():
        # When a space needs to be in the tagvalue,
        # double quotes must surround the entire tag.
        start = '"'
        end = '" '
    else:
        start = ''
        end = ' '
    info_string = str(start + header.rstrip() + ":" +
                      text.rstrip() + end)
    return info_string


class FlickrCommunicator(object):
    """
    In this class, a flickr object is created.
    The authentication is done via browser. The first time
    this connection is made, a browser will open and ask
    to confirm this connection. Every next time the connection
    is made, there won't be a question again.
    """
    def __init__(self, key, secret, uid):
        self.key = key
        self.secret = secret
        self.uid = uid
        self.token = None
        self.frob = None
        self.flickr = flickrapi.FlickrAPI(key, secret)
        self.flickr.authenticate_via_browser(perms='write')


"""
Call the main function if this is the main program.
"""
if __name__ == "__main__":
    main()
